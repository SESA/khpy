#!/usr/bin/env python

########################################
#  Kittyhawk Command-line Interface    #
########################################
import argparse
import ConfigParser 
import os
import sys

# load envoirnment variables
khsrc = os.path.dirname(os.path.abspath(__file__))
sys.path.append(khsrc)
required_vars = ["KHDB", "KHTYPE"] #TODO: move into config
missing_vars = False
for i in required_vars:
  if os.getenv(i) == None:
    print "Error: missing environment variable",i
    missing_vars = True
if missing_vars:
  exit()

# verify location of database
# TODO: check config for variable
if os.path.exists(os.getenv("KHDB")) == 0:
  print "Error: invalid $KHDB directory", os.getenv("KHDB")
  exit()

# import configuration
Config = ConfigParser.SafeConfigParser()
Config.read(os.path.join(khsrc,"kh.cfg"))

# Construct the specified kittyhawk object 
def load_kh_type():
  #TODO: allow alternative to envoirnment variable
  env = os.getenv("KHTYPE")
  configs=[os.path.join(khsrc,"kh_base.cfg")]
  for i in Config.sections():
    if env == i:
      # load modules from src dir
      cls = Config.get(i, 'class')
      mod = __import__(i, fromlist=[cls])
      ref = getattr(mod, cls)
      # build configuration list
      configs.append(os.path.join(khsrc,Config.get(i,'config')))
      # this constructs and returns kh object
      return ref(configs)
  # return base object if no platform was loaded
  print "Warning: a recognized Kittyhawk type was not found. Loading root \
  functionality only."
  from kh_base import KhRoot
  return KhRoot(configs)

# create kh object
kh = load_kh_type()
  
# Command-line parsers for core kittyhawk commands
par    = argparse.ArgumentParser()
subpar = par.add_subparsers()
# clean
kh.parse_clean(subpar.add_parser('clean',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="Remove all user, empty free pool"))
# console
kh.parse_console(subpar.add_parser('console',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="Get console of allocated instance"))
# get
kh.parse_get(subpar.add_parser('get', 
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="Allocate instances for a given user"))
# info
kh.parse_info(subpar.add_parser('info',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="List users"))
# init
kh.parse_init(subpar.add_parser('init',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="Initialize Kittyhawk environment, populate free pool"))
# install
kh.parse_install(subpar.add_parser('install',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="Create empty database structure"))
# rm
kh.parse_rm(subpar.add_parser('rm',
  formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  description="Remove user, free assigned nodes"))

# parse input 
clinput = vars(par.parse_args())

# call into command function with arguments
if 'optional_args' in clinput:
  clinput['required_args'].append('optional_args')
if 'required_args' not in clinput:
  clinput['func']()
elif len(clinput['required_args']) == 1:
  clinput['func']( clinput[clinput['required_args'][0]] )
elif len(clinput['required_args']) == 2:
  clinput['func']( clinput[clinput['required_args'][0]], 
      clinput[clinput['required_args'][1]] )
elif len(clinput['required_args']) == 3:
  clinput['func']( clinput[clinput['required_args'][0]], 
      clinput[clinput['required_args'][1]],
      clinput[clinput['required_args'][2]] )
elif len(clinput['required_args']) == 4:
  clinput['func']( clinput[clinput['required_args'][0]], 
      clinput[clinput['required_args'][1]],
      clinput[clinput['required_args'][2]],
      clinput[clinput['required_args'][3]] )
elif len(clinput['required_args']) == 5:
  clinput['func']( clinput[clinput['required_args'][0]], 
      clinput[clinput['required_args'][1]],
      clinput[clinput['required_args'][2]],
      clinput[clinput['required_args'][3]],
      clinput[clinput['required_args'][4]] )
# follow the above pattern to extend for 6+ parameters
